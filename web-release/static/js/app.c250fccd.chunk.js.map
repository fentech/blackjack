{"version":3,"sources":["app/features/Game/constants.ts","app/features/GameControls/utils.ts","app/features/Hands/utils.ts","app/features/Game/gameSlice.ts","app/features/GameControls/GameControls.styles.ts","app/features/BetForm/BetForm.styles.ts","app/functions/useSelector.ts","app/features/BetForm/BetForm.tsx","app/features/GameControls/GameControls.tsx","app/features/Card/Card.tsx","app/features/Hands/Hand.styles.ts","app/features/Hands/Hand.tsx","app/features/Game/Game.styles.ts","app/features/Game/Game.tsx","app/store.ts","App.tsx","web-build/register-service-worker.js"],"names":["RANKS","2","3","4","5","6","7","8","9","10","jack","queen","king","ace","SUITS","createDeck","Object","keys","map","rank","suit","flat","personBusts","personScore","playerLoses","playerScore","dealerScore","turn","playerWins","shuffleDeck","deck","i","length","newIndex","Math","floor","random","currentValue","getValue","cards","aces","value","reduce","cumm","card","newDeck","state","deriveFromInitialState","bet","chips","dealer","score","isBetting","isNewGame","player","initialState","gameSlice","createSlice","name","reducers","hit","action","newCard","shift","payload","push","initNewRound","resetDeck","resetGame","setTurn","stand","startNewRound","deal","toggleBetting","actions","ButtonBase","Platform","OS","TouchableOpacity","TouchableHighlight","Button","styled","disabled","ButtonText","Text","Container","Layout","Title","Input","KittenInput","useSelector","useSelectorBase","BetForm","onSubmit","React","useState","setBet","error","setError","game","testID","category","toString","onChangeText","text","number","parseInt","status","caption","size","onPress","GameControls","gameOver","dispatch","useDispatch","View","CardText","Card","Name","Hand","hideCard","person","personState","toUpperCase","slice","hiddenScore","getHiddenCardValue","index","key","os","Wrapper","SafeAreaView","Status","HandContainer","Game","setGameOver","useEffect","isGameOver","setTimeout","getEndGameStatus","rootReducer","combineReducers","store","configureStore","reducer","App","mapping","theme","lightTheme","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","console"],"mappings":"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","file":"static/js/app.c250fccd.chunk.js","sourcesContent":["import { Ranks, Suits } from \"../Card/types\"\n\nexport const RANKS: Record<Ranks, number> = {2: 2,3: 3,4: 4,5: 5,6: 6,7: 7,8: 8,9: 9,10: 10,jack: 10,queen: 10,king: 10, ace: 11}\nexport const SUITS: Suits[] = [\"diamonds\", \"hearts\", \"spades\", \"clubs\"]\n","import { Turn } from \"./types\";\nimport { CardProps } from \"../Card/Card\";\nimport { Ranks } from \"../Card/types\";\nimport { PersonState } from \"../Game/gameSlice\";\nimport { RANKS, SUITS } from \"../Game/constants\";\n\nexport const createDeck = () => {\n  return (Object.keys(RANKS) as Ranks[])\n    .map((rank) => SUITS.map((suit) => ({ suit, rank })))\n    .flat();\n};\n\nexport const getHiddenCardValue = ({ score, cards }: PersonState) => {\n  let hiddenScore = score;\n\n  cards.slice(1).map((card) => {\n    hiddenScore -= RANKS[card.rank];\n  });\n\n  return hiddenScore;\n};\n\nexport const personBusts = (personScore: number) => personScore > 21;\n\nexport const playerLoses = (\n  playerScore: number,\n  dealerScore: number,\n  turn: Turn\n) =>\n  personBusts(playerScore) ||\n  (!turn &&\n    !personBusts(dealerScore) &&\n    playerScore <= 21 &&\n    dealerScore <= 21 &&\n    playerScore < dealerScore);\n\nexport const playerWins = (\n  playerScore: number,\n  dealerScore: number,\n  turn: Turn\n) =>\n  !personBusts(playerScore) &&\n  turn !== \"player\" &&\n  (personBusts(dealerScore) ||\n    (!turn &&\n      playerScore <= 21 &&\n      dealerScore <= 21 &&\n      playerScore > dealerScore));\n\nexport const getEndGameStatus = (\n  playerScore: number,\n  dealerScore: number,\n  turn: Turn\n) => {\n  if (playerWins(playerScore, dealerScore, turn)) return \"YOU WIN!!\";\n\n  if (playerLoses(playerScore, dealerScore, turn)) return \"You lost...\";\n\n  return \"Pushed\";\n};\n\nexport const isGameOver = (\n  playerScore: number,\n  dealerScore: number,\n  turn: Turn\n) => {\n  return (\n    !turn ||\n    playerLoses(playerScore, dealerScore, turn) ||\n    playerWins(playerScore, dealerScore, turn)\n  );\n};\n\nexport const shuffleDeck = (deck: CardProps[]) => {\n  for (let i = 0; i < deck.length; i++) {\n    let newIndex = Math.floor(Math.random() * (i + 1));\n    let currentValue = deck[i];\n    deck[i] = deck[newIndex];\n    deck[newIndex] = currentValue;\n  }\n\n  return deck;\n};\n","import { CardProps } from '../Card/Card';\nimport { RANKS } from '../Game/constants';\n\nexport const getValue = (cards: CardProps[]): number => {\n  if (cards.length === 0) return 0;\n\n  let aces = 0;\n  let value = cards.reduce((cumm, card) => {\n    if (card.rank === 'ace') aces++\n    return cumm += RANKS[card.rank]\n  }, 0)\n\n  while (value > 21 && aces > 0) {\n    value -= 10\n    aces--\n  }\n\n  return value\n}\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { CardProps } from \"../Card/Card\";\nimport { Person, Turn } from \"../GameControls/types\";\nimport { createDeck, shuffleDeck, playerWins } from \"../GameControls/utils\";\nimport { getValue } from \"../Hands/utils\";\n\nconst resetPerson = () => ({ cards: [], score: 0 });\n\nconst newDeck = (state: GameState) => {\n  state.deck = shuffleDeck(createDeck());\n};\n\nexport interface PersonState {\n  cards: CardProps[];\n  score: number;\n}\nexport interface GameState {\n  bet: number;\n  chips: number;\n  deck: CardProps[];\n  dealer: PersonState;\n  isBetting: boolean;\n  isNewGame: boolean;\n  player: PersonState;\n  turn: Turn;\n}\n\nexport const deriveFromInitialState = (bet: number = 0): GameState => ({\n  bet,\n  chips: 100,\n  deck: shuffleDeck(createDeck()),\n  dealer: resetPerson(),\n  isBetting: true,\n  isNewGame: true,\n  player: resetPerson(),\n  turn: \"player\",\n});\n\nexport const initialState = deriveFromInitialState();\n\nconst hitCR: CaseReducer<GameState, PayloadAction<Person>> = (\n  state,\n  action\n) => {\n  const newCard = state.deck.shift() as CardProps;\n\n  state[action.payload].cards.push(newCard);\n  state[action.payload].score = getValue(state[action.payload].cards);\n};\n\nconst initNewRoundCR: CaseReducer<GameState> = (state) => {\n  if (playerWins(state.player.score, state.dealer.score, state.turn)) {\n    state.chips += state.bet;\n  } else {\n    state.chips -= state.bet;\n  }\n\n  state.isBetting = true;\n\n  state.bet = 0;\n};\n\nconst resetDeckCR: CaseReducer<GameState> = (state) => {\n  newDeck(state);\n};\n\nconst resetGameCR: CaseReducer<GameState> = () => deriveFromInitialState();\n\nconst setTurnCR: CaseReducer<GameState, PayloadAction<Turn>> = (\n  state,\n  action\n) => {\n  state.turn = action.payload;\n};\n\nconst standCR: CaseReducer<GameState> = (state) => {\n  state.turn = \"dealer\";\n};\n\nconst startNewRoundCR: CaseReducer<GameState, PayloadAction<number>> = (\n  state,\n  { payload }\n) => {\n  newDeck(state);\n\n  state.isBetting = false;\n  if (state.isNewGame) state.isNewGame = false;\n\n  state.bet = payload;\n\n  state.turn = \"player\";\n  state.dealer = resetPerson();\n  state.player = resetPerson();\n\n  function deal() {\n    return state.deck.shift() as CardProps;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    if ((i + 1) % 2 === 0) {\n      const newCard = deal();\n      state.dealer.cards.push(newCard);\n      state.dealer.score += getValue([newCard]);\n    } else {\n      const newCard = deal();\n      state.player.cards.push(newCard);\n      state.player.score += getValue([newCard]);\n    }\n  }\n};\n\nconst toggleBettingCR: CaseReducer<GameState> = (state) => {\n  state.isBetting = !state.isBetting;\n};\n\nconst gameSlice = createSlice({\n  name: \"gameControls\",\n  initialState,\n  reducers: {\n    hit: hitCR,\n    initNewRound: initNewRoundCR,\n    resetDeck: resetDeckCR,\n    resetGame: resetGameCR,\n    setTurn: setTurnCR,\n    stand: standCR,\n    startNewRound: startNewRoundCR,\n    toggleBetting: toggleBettingCR,\n  },\n});\n\nexport const {\n  hit,\n  initNewRound,\n  resetDeck,\n  resetGame,\n  setTurn,\n  stand,\n  startNewRound,\n  toggleBetting,\n} = gameSlice.actions;\nexport const { name } = gameSlice;\n\nexport default gameSlice.reducer;\n","import { Platform, TouchableHighlight, TouchableOpacity } from 'react-native';\nimport styled from \"styled-components/native\";\n\nconst OS = Platform.OS;\n\nconst ButtonBase = OS === \"android\" ? TouchableOpacity : TouchableHighlight;\nexport const Button = styled(ButtonBase)`\n  padding: 20px;\n  background-color: ${({ disabled }) => (disabled ? \"#ddd\" : \"#e89\")};\n  align-items: center;\n  justify-content: flex-start;\n  margin-bottom: 20px;\n  border-radius: 4px;\n`;\n\nexport const ButtonText = styled.Text`\n  font-size: 22px;\n  font-weight: bold;\n`;\n","import styled from \"styled-components/native\";\nimport { Input as KittenInput, Layout, Text } from \"@ui-kitten/components\";\n\nexport const Container = styled(Layout)`\n  padding: 40px 0;\n`;\n\nexport const Title = styled(Text)`\n  margin-bottom: 10px;\n  text-align: center;\n`;\n\nexport const Input = styled(KittenInput)`\n  margin-bottom: 10px;\n`;\n","import { useSelector as useSelectorBase, TypedUseSelectorHook } from 'react-redux'\nimport { RootState } from '../store';\n\nconst useSelector: TypedUseSelectorHook<RootState> = useSelectorBase\n\nexport default useSelector;\n","import React from \"react\";\nimport { Button } from \"@ui-kitten/components\";\nimport { Container, Input, Title } from \"./BetForm.styles\";\nimport useSelector from \"../../functions/useSelector\";\n\ninterface Props {\n  onSubmit(bet: number): void;\n}\n\nconst BetForm: React.FC<Props> = ({ onSubmit }) => {\n  const [bet, setBet] = React.useState<number | string | undefined | null>();\n  const [error, setError] = React.useState<string | null>(null);\n  const { chips } = useSelector((state) => state.game);\n\n  return (\n    <Container testID=\"BetForm\">\n      <Title category=\"h3\">Place your bet</Title>\n      <Input\n        value={bet || bet === 0 ? bet.toString() : \"\"}\n        onChangeText={(text) => {\n          const number = parseInt(text);\n\n          if (!number && number !== 0) {\n            setError(\"Must be a valid number.\");\n            setBet(text);\n          } else {\n            setBet(number);\n\n            if (number <= 0) {\n              setError(\"Bet must be more than 0.\");\n            } else if (number > chips) {\n              setError(\"Bet must be less than or equal to your total chips.\");\n            } else {\n              setError(null);\n            }\n          }\n        }}\n        status={!error ? \"primary\" : \"danger\"}\n        caption={!error ? \"\" : error}\n        testID=\"BetFormInput\"\n      />\n      <Button\n        disabled={!bet || !!error}\n        size=\"large\"\n        onPress={() => {\n          if (typeof bet === \"number\") onSubmit(bet);\n        }}\n        testID=\"BetFormButton\"\n      >\n        Bet\n      </Button>\n    </Container>\n  );\n};\n\nexport default BetForm;\n","import React from \"react\";\nimport { Button, ButtonText } from \"./GameControls.styles\";\nimport { useDispatch } from \"react-redux\";\nimport { hit, initNewRound, setTurn, startNewRound } from \"../Game/gameSlice\";\nimport BetForm from \"../BetForm/BetForm\";\nimport useSelector from \"../../functions/useSelector\";\nimport { View } from \"react-native\";\n\ninterface Props {\n  gameOver: boolean;\n}\n\nconst GameControls: React.FC<Props> = ({ gameOver }) => {\n  const { isBetting } = useSelector((state) => state.game);\n  const dispatch = useDispatch();\n\n  if (isBetting)\n    return (\n      <View testID=\"GameControls\">\n        <BetForm\n          onSubmit={(bet) => {\n            dispatch(startNewRound(bet));\n          }}\n        />\n      </View>\n    );\n\n  if (gameOver)\n    return (\n      <View testID=\"GameControls\">\n        <Button\n          testID=\"PlayAgainButton\"\n          onPress={() => {\n            dispatch(initNewRound());\n          }}\n        >\n          <ButtonText>Play Again</ButtonText>\n        </Button>\n      </View>\n    );\n\n  return (\n    <View testID=\"GameControls\">\n      <Button\n        testID=\"HitButton\"\n        onPress={() => {\n          dispatch(hit(\"player\"));\n        }}\n      >\n        <ButtonText>Hit</ButtonText>\n      </Button>\n      <Button\n        testID=\"StandButton\"\n        onPress={() => {\n          dispatch(setTurn(\"dealer\"));\n        }}\n      >\n        <ButtonText>Stand</ButtonText>\n      </Button>\n    </View>\n  );\n};\n\nexport default GameControls;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\n\nexport interface CardProps {\n  suit: \"hearts\" | \"diamonds\" | \"spades\" | \"clubs\";\n  rank: 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | \"jack\" | \"queen\" | \"king\" | \"ace\";\n}\n\nconst CardText = styled.Text`\n  font-size: 18px;\n`;\n\nconst Card: React.FC<CardProps> = ({ suit, rank }) => {\n  return (\n    <CardText>\n      {rank} of {suit}\n    </CardText>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components/native'\n\nexport const Container = styled.View`\n  margin-bottom: 30px;\n`;\n\nexport const Name = styled.Text`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 8px;\n`;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport Card from \"../Card/Card\";\nimport { PersonState } from \"../Game/gameSlice\";\nimport { getHiddenCardValue } from \"../GameControls/utils\";\nimport { Container, Name } from \"./Hand.styles\";\nimport { Person } from \"../GameControls/types\";\n\ninterface Props {\n  hideCard?: boolean;\n  person: Person;\n  personState: PersonState;\n}\n\nconst Hand: React.FC<Props & Testable> = ({\n  hideCard,\n  person,\n  personState,\n  testID = \"Hand\",\n}) => {\n  return (\n    <Container testID={testID}>\n      <Name testID=\"HandName\">\n        {person[0].toUpperCase() + person.slice(1)} -{\" \"}\n        {personState.cards.length &&\n          (person == \"dealer\" && hideCard\n            ? getHiddenCardValue(personState)\n            : personState.score)}\n      </Name>\n      <View>\n        {person == \"dealer\" && hideCard ? (\n          <Card {...personState.cards[0]} />\n        ) : (\n          personState.cards.map((card, index) => <Card key={index} {...card} />)\n        )}\n      </View>\n    </Container>\n  );\n};\n\nexport default Hand;\n","import { Platform } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst os = Platform.OS;\n\nexport const Wrapper = styled.SafeAreaView`\n  ${os === \"ios\" ? \"margin: 0 20px;\" : \"padding: 0 4%;\"};\n  ${os === \"android\" ? \"margin-top: 40px;\" : \"margin-top: 10px;\"}\n`;\n\nexport const Status = styled.Text`\n  font-size: 28px;\n  text-align: center;\n  margin-bottom: 30px;\n  font-weight: 300;\n  letter-spacing: 1px;\n`;\n\nexport const Title = styled.Text`\n  font-size: 40px;\n  text-align: center;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\nexport const HandContainer = styled.View`\n  margin: 20px 0;\n`;\n","import React from \"react\";\n// redux\nimport { useDispatch } from \"react-redux\";\nimport { hit, setTurn, resetGame } from \"./gameSlice\";\n// components\nimport { Text } from \"@ui-kitten/components\";\nimport GameControls from \"../GameControls/GameControls\";\nimport Hand from \"../Hands/Hand\";\nimport { HandContainer, Status, Title, Wrapper } from \"./Game.styles\";\n// utils\nimport { getEndGameStatus, isGameOver } from \"../GameControls/utils\";\nimport useSelector from \"../../functions/useSelector\";\n\nexport default function Game() {\n  const [gameOver, setGameOver] = React.useState(false);\n\n  const dispatch = useDispatch();\n  const { player, dealer, turn, bet, chips, isBetting } = useSelector(\n    (state) => state.game\n  );\n\n  React.useEffect(() => {\n    if (isGameOver(player.score, dealer.score, turn) && !gameOver) {\n      setGameOver(true);\n    } else if (turn && gameOver) {\n      setGameOver(false);\n    }\n  }, [player, dealer, turn]);\n\n  React.useEffect(() => {\n    if (turn === \"dealer\") {\n      if (dealer.score < 17) {\n        setTimeout(() => dispatch(hit(\"dealer\")), 1000);\n      } else {\n        dispatch(setTurn(null));\n        setGameOver(true);\n      }\n    }\n  }, [dealer, turn]);\n\n  React.useEffect(() => {\n    if (!chips) dispatch(resetGame());\n  }, [chips]);\n\n  return (\n    <Wrapper>\n      <Title>Blackjack</Title>\n      {gameOver ? (\n        <Status testID=\"Status\">\n          {getEndGameStatus(player.score, dealer.score, turn)}\n        </Status>\n      ) : null}\n      {!isBetting && (\n        <Text testID=\"CurrentBet\" category=\"h4\">\n          Current bet: {bet.toString()}\n        </Text>\n      )}\n      <Text category=\"h5\">Total chips: {chips.toString()}</Text>\n      {!isBetting && (\n        <HandContainer testID=\"Cards\">\n          <Hand\n            hideCard={turn === \"player\"}\n            person=\"dealer\"\n            personState={dealer}\n            testID=\"DealerHand\"\n          />\n          <Hand person=\"player\" personState={player} testID=\"PlayerHand\" />\n        </HandContainer>\n      )}\n      <GameControls gameOver={gameOver} />\n    </Wrapper>\n  );\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport game from \"./features/Game/gameSlice\";\nconst rootReducer = combineReducers({\n  game,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ApplicationProvider } from \"@ui-kitten/components\";\nimport { mapping, light as lightTheme } from \"@eva-design/eva\";\nimport Game from \"./app/features/Game/Game\";\nimport store from \"./app/store\";\n\nexport default function App() {\n  return (\n    <ApplicationProvider mapping={mapping} theme={lightTheme}>\n      <Provider store={store}>\n        <Game />\n      </Provider>\n    </ApplicationProvider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}