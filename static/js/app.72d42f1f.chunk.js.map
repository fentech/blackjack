{"version":3,"sources":["app/features/Game/constants.ts","app/features/GameControls/utils.ts","app/features/Hands/utils.ts","app/features/Game/gameSlice.ts","app/features/GameControls/GameControls.styles.ts","app/features/BetForm/BetForm.styles.ts","app/functions/useSelector.ts","app/features/BetForm/BetForm.tsx","app/features/GameControls/GameControls.tsx","app/features/Card/Card.tsx","app/features/Hands/Hand.styles.ts","app/features/Hands/Hand.tsx","app/features/Game/Game.styles.ts","app/features/Game/Game.tsx","app/store.ts","App.tsx","web-build/register-service-worker.js"],"names":["RANKS","2","3","4","5","6","7","8","9","10","jack","queen","king","ace","SUITS","createDeck","Object","keys","map","rank","suit","flat","personBusts","personScore","playerLoses","player","dealer","turn","playerScore","score","dealerScore","playerWins","cards","length","isGameOver","partialGameState","shuffleDeck","deck","i","newIndex","Math","floor","random","currentValue","getValue","aces","value","reduce","cumm","card","newDeck","state","deriveFromInitialState","bet","chips","gameOver","isBetting","isNewGame","initialState","gameSlice","createSlice","name","reducers","hit","action","newCard","shift","payload","push","initNewRound","resetDeck","resetGame","setTurn","stand","startNewRound","toggleBetting","actions","ButtonBase","Platform","OS","TouchableOpacity","TouchableHighlight","Button","styled","disabled","ButtonText","Text","Container","Layout","Title","Input","KittenInput","useSelector","useSelectorBase","BetForm","onSubmit","React","useState","setBet","error","setError","game","testID","category","toString","onChangeText","text","number","parseInt","status","caption","size","onPress","GameControls","dispatch","useDispatch","View","CardText","Card","Name","Hand","hideCard","person","personState","toUpperCase","slice","hiddenScore","getHiddenCardValue","index","key","os","Wrapper","SafeAreaView","Status","HandContainer","Game","gameState","useEffect","setTimeout","rootReducer","combineReducers","store","configureStore","reducer","App","mapping","theme","lightTheme","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","console"],"mappings":"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","file":"static/js/app.72d42f1f.chunk.js","sourcesContent":["import { Ranks, Suits } from \"../Card/types\"\n\nexport const RANKS: Record<Ranks, number> = {2: 2,3: 3,4: 4,5: 5,6: 6,7: 7,8: 8,9: 9,10: 10,jack: 10,queen: 10,king: 10, ace: 11}\nexport const SUITS: Suits[] = [\"diamonds\", \"hearts\", \"spades\", \"clubs\"]\n","import { Turn } from \"./types\";\nimport { CardProps } from \"../Card/Card\";\nimport { Ranks } from \"../Card/types\";\nimport { PersonState } from \"../Game/gameSlice\";\nimport { RANKS, SUITS } from \"../Game/constants\";\n\nexport interface PartialGameState {\n  player: PersonState;\n  dealer: PersonState;\n  turn: Turn;\n}\n\nexport const createDeck = () => {\n  return (Object.keys(RANKS) as Ranks[])\n    .map((rank) => SUITS.map((suit) => ({ suit, rank })))\n    .flat();\n};\n\nexport const getHiddenCardValue = ({ score, cards }: PersonState) => {\n  let hiddenScore = score;\n\n  cards.slice(1).map((card) => {\n    hiddenScore -= RANKS[card.rank];\n  });\n\n  return hiddenScore;\n};\n\nexport const personBusts = (personScore: number) => personScore > 21;\n\nexport const playerLoses = ({ player, dealer, turn }: PartialGameState) => {\n  const { score: playerScore } = player;\n  const { score: dealerScore } = dealer;\n\n  return (\n    personBusts(playerScore) ||\n    (!turn &&\n      !personBusts(dealerScore) &&\n      playerScore <= 21 &&\n      dealerScore <= 21 &&\n      playerScore < dealerScore)\n  );\n};\n\nexport const playerWins = ({ player, dealer, turn }: PartialGameState) => {\n  const { score: playerScore } = player;\n  const { score: dealerScore } = dealer;\n\n  return (\n    (!personBusts(playerScore) &&\n      turn !== \"player\" &&\n      (personBusts(dealerScore) ||\n        (!turn &&\n          playerScore <= 21 &&\n          dealerScore <= 21 &&\n          playerScore > dealerScore))) ||\n    (turn === \"player\" && player.cards.length === 2 && playerScore === 21)\n  );\n};\n\nexport const getEndGameStatus = (partialGameState: PartialGameState) => {\n  if (playerWins(partialGameState)) return \"YOU WIN!!\";\n\n  if (playerLoses(partialGameState)) return \"You lost...\";\n\n  return \"Pushed\";\n};\n\nexport const isGameOver = (partialGameState: PartialGameState) => {\n  return (\n    !partialGameState.turn ||\n    playerLoses(partialGameState) ||\n    playerWins(partialGameState)\n  );\n};\n\nexport const shuffleDeck = (deck: CardProps[]) => {\n  for (let i = 0; i < deck.length; i++) {\n    let newIndex = Math.floor(Math.random() * (i + 1));\n    let currentValue = deck[i];\n    deck[i] = deck[newIndex];\n    deck[newIndex] = currentValue;\n  }\n\n  return deck;\n};\n","import { CardProps } from '../Card/Card';\nimport { RANKS } from '../Game/constants';\n\nexport const getValue = (cards: CardProps[]): number => {\n  if (cards.length === 0) return 0;\n\n  let aces = 0;\n  let value = cards.reduce((cumm, card) => {\n    if (card.rank === 'ace') aces++\n    return cumm += RANKS[card.rank]\n  }, 0)\n\n  while (value > 21 && aces > 0) {\n    value -= 10\n    aces--\n  }\n\n  return value\n}\n","import { createSlice, PayloadAction, CaseReducer } from \"@reduxjs/toolkit\";\nimport { CardProps } from \"../Card/Card\";\nimport { Person, Turn } from \"../GameControls/types\";\nimport {\n  createDeck,\n  shuffleDeck,\n  playerWins,\n  playerLoses,\n} from \"../GameControls/utils\";\nimport { getValue } from \"../Hands/utils\";\nimport { isGameOver } from \"../GameControls/utils\";\n\nconst resetPerson = () => ({ cards: [], score: 0 });\n\nconst newDeck = (state: GameState) => {\n  state.deck = shuffleDeck(createDeck());\n};\n\nexport interface PersonState {\n  cards: CardProps[];\n  score: number;\n}\nexport interface GameState {\n  bet: number;\n  chips: number;\n  deck: CardProps[];\n  dealer: PersonState;\n  gameOver: boolean;\n  isBetting: boolean;\n  isNewGame: boolean;\n  player: PersonState;\n  turn: Turn;\n}\n\nexport const deriveFromInitialState = (bet: number = 0): GameState => ({\n  bet,\n  chips: 100,\n  deck: shuffleDeck(createDeck()),\n  dealer: resetPerson(),\n  gameOver: false,\n  isBetting: true,\n  isNewGame: true,\n  player: resetPerson(),\n  turn: \"player\",\n});\n\nexport const initialState = deriveFromInitialState();\n\nconst hitCR: CaseReducer<GameState, PayloadAction<Person>> = (\n  state,\n  action\n) => {\n  if (!state.deck.length) newDeck(state);\n\n  const newCard = state.deck.shift() as CardProps;\n\n  state[action.payload].cards.push(newCard);\n  state[action.payload].score = getValue(state[action.payload].cards);\n\n  if (isGameOver(state)) state.gameOver = true;\n};\n\nconst initNewRoundCR: CaseReducer<GameState> = (state) => {\n  if (playerWins(state)) {\n    state.chips += state.bet;\n  } else if (playerLoses(state)) {\n    state.chips -= state.bet;\n  }\n\n  state.isBetting = true;\n\n  state.bet = 0;\n\n  state.gameOver = false;\n};\n\nconst resetDeckCR: CaseReducer<GameState> = (state) => {\n  newDeck(state);\n};\n\nconst resetGameCR: CaseReducer<GameState> = () => deriveFromInitialState();\n\nconst setTurnCR: CaseReducer<GameState, PayloadAction<Turn>> = (\n  state,\n  action\n) => {\n  state.turn = action.payload;\n\n  if (action.payload === null) state.gameOver = true;\n};\n\nconst standCR: CaseReducer<GameState> = (state) => {\n  state.turn = \"dealer\";\n};\n\nconst startNewRoundCR: CaseReducer<GameState, PayloadAction<number>> = (\n  state,\n  { payload }\n) => {\n  state.isBetting = false;\n  if (state.isNewGame) state.isNewGame = false;\n\n  state.bet = payload;\n\n  state.turn = \"player\";\n  state.dealer = resetPerson();\n  state.player = resetPerson();\n\n  function deal() {\n    if (!state.deck.length) newDeck(state);\n\n    return state.deck.shift() as CardProps;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    const newCard = deal();\n\n    if ((i + 1) % 2 === 0) {\n      state.dealer.cards.push(newCard);\n    } else {\n      state.player.cards.push(newCard);\n    }\n  }\n\n  state.dealer.score += getValue(state.dealer.cards);\n  state.player.score += getValue(state.player.cards);\n\n  if (isGameOver(state)) state.gameOver = true;\n};\n\nconst toggleBettingCR: CaseReducer<GameState> = (state) => {\n  state.isBetting = !state.isBetting;\n};\n\nconst gameSlice = createSlice({\n  name: \"gameControls\",\n  initialState,\n  reducers: {\n    hit: hitCR,\n    initNewRound: initNewRoundCR,\n    resetDeck: resetDeckCR,\n    resetGame: resetGameCR,\n    setTurn: setTurnCR,\n    stand: standCR,\n    startNewRound: startNewRoundCR,\n    toggleBetting: toggleBettingCR,\n  },\n});\n\nexport const {\n  hit,\n  initNewRound,\n  resetDeck,\n  resetGame,\n  setTurn,\n  stand,\n  startNewRound,\n  toggleBetting,\n} = gameSlice.actions;\nexport const { name } = gameSlice;\n\nexport default gameSlice.reducer;\n","import { Platform, TouchableHighlight, TouchableOpacity } from 'react-native';\nimport styled from \"styled-components/native\";\n\nconst OS = Platform.OS;\n\nconst ButtonBase = OS === \"android\" ? TouchableOpacity : TouchableHighlight;\nexport const Button = styled(ButtonBase)`\n  padding: 20px;\n  background-color: ${({ disabled }) => (disabled ? \"#ddd\" : \"#e89\")};\n  align-items: center;\n  justify-content: flex-start;\n  margin-bottom: 20px;\n  border-radius: 4px;\n`;\n\nexport const ButtonText = styled.Text`\n  font-size: 22px;\n  font-weight: bold;\n`;\n","import styled from \"styled-components/native\";\nimport { Input as KittenInput, Layout, Text } from \"@ui-kitten/components\";\n\nexport const Container = styled(Layout)`\n  padding: 40px 0;\n`;\n\nexport const Title = styled(Text)`\n  margin-bottom: 10px;\n  text-align: center;\n`;\n\nexport const Input = styled(KittenInput)`\n  margin-bottom: 10px;\n`;\n","import { useSelector as useSelectorBase, TypedUseSelectorHook } from 'react-redux'\nimport { RootState } from '../store';\n\nconst useSelector: TypedUseSelectorHook<RootState> = useSelectorBase\n\nexport default useSelector;\n","import React from \"react\";\nimport { Button } from \"@ui-kitten/components\";\nimport { Container, Input, Title } from \"./BetForm.styles\";\nimport useSelector from \"../../functions/useSelector\";\n\ninterface Props {\n  onSubmit(bet: number): void;\n}\n\nconst BetForm: React.FC<Props> = ({ onSubmit }) => {\n  const [bet, setBet] = React.useState<number | string | undefined | null>();\n  const [error, setError] = React.useState<string | null>(null);\n  const { chips } = useSelector((state) => state.game);\n\n  return (\n    <Container testID=\"BetForm\">\n      <Title category=\"h3\">Place your bet</Title>\n      <Input\n        value={bet || bet === 0 ? bet.toString() : \"\"}\n        onChangeText={(text) => {\n          const number = parseInt(text);\n\n          if (!number && number !== 0) {\n            setError(\"Must be a valid number.\");\n            setBet(text);\n          } else {\n            setBet(number);\n\n            if (number <= 0) {\n              setError(\"Bet must be more than 0.\");\n            } else if (number > chips) {\n              setError(\"Bet must be less than or equal to your total chips.\");\n            } else {\n              setError(null);\n            }\n          }\n        }}\n        status={!error ? \"primary\" : \"danger\"}\n        caption={!error ? \"\" : error}\n        testID=\"BetFormInput\"\n      />\n      <Button\n        disabled={!bet || !!error}\n        size=\"large\"\n        onPress={() => {\n          if (typeof bet === \"number\") onSubmit(bet);\n        }}\n        testID=\"BetFormButton\"\n      >\n        Bet\n      </Button>\n    </Container>\n  );\n};\n\nexport default BetForm;\n","import React from \"react\";\nimport { Button, ButtonText } from \"./GameControls.styles\";\nimport { useDispatch } from \"react-redux\";\nimport { hit, initNewRound, setTurn, startNewRound } from \"../Game/gameSlice\";\nimport BetForm from \"../BetForm/BetForm\";\nimport useSelector from \"../../functions/useSelector\";\nimport { View } from \"react-native\";\n\ninterface Props {\n  gameOver: boolean;\n}\n\nconst GameControls: React.FC<Props> = ({ gameOver }) => {\n  const { isBetting } = useSelector((state) => state.game);\n  const dispatch = useDispatch();\n\n  if (isBetting)\n    return (\n      <View testID=\"GameControls\">\n        <BetForm\n          onSubmit={(bet) => {\n            dispatch(startNewRound(bet));\n          }}\n        />\n      </View>\n    );\n\n  if (gameOver)\n    return (\n      <View testID=\"GameControls\">\n        <Button\n          testID=\"PlayAgainButton\"\n          onPress={() => {\n            dispatch(initNewRound());\n          }}\n        >\n          <ButtonText>Play Again</ButtonText>\n        </Button>\n      </View>\n    );\n\n  return (\n    <View testID=\"GameControls\">\n      <Button\n        testID=\"HitButton\"\n        onPress={() => {\n          dispatch(hit(\"player\"));\n        }}\n      >\n        <ButtonText>Hit</ButtonText>\n      </Button>\n      <Button\n        testID=\"StandButton\"\n        onPress={() => {\n          dispatch(setTurn(\"dealer\"));\n        }}\n      >\n        <ButtonText>Stand</ButtonText>\n      </Button>\n    </View>\n  );\n};\n\nexport default GameControls;\n","import React from \"react\";\nimport styled from \"styled-components/native\";\n\nexport interface CardProps {\n  suit: \"hearts\" | \"diamonds\" | \"spades\" | \"clubs\";\n  rank: 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | \"jack\" | \"queen\" | \"king\" | \"ace\";\n}\n\nconst CardText = styled.Text`\n  font-size: 18px;\n`;\n\nconst Card: React.FC<CardProps> = ({ suit, rank }) => {\n  return (\n    <CardText>\n      {rank} of {suit}\n    </CardText>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components/native'\n\nexport const Container = styled.View`\n  margin-bottom: 30px;\n`;\n\nexport const Name = styled.Text`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 8px;\n`;\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport Card from \"../Card/Card\";\nimport { PersonState } from \"../Game/gameSlice\";\nimport { getHiddenCardValue } from \"../GameControls/utils\";\nimport { Container, Name } from \"./Hand.styles\";\nimport { Person } from \"../GameControls/types\";\n\ninterface Props {\n  hideCard?: boolean;\n  person: Person;\n  personState: PersonState;\n}\n\nconst Hand: React.FC<Props & Testable> = ({\n  hideCard,\n  person,\n  personState,\n  testID = \"Hand\",\n}) => {\n  return (\n    <Container testID={testID}>\n      <Name testID=\"HandName\">\n        {person[0].toUpperCase() + person.slice(1)} -{\" \"}\n        {personState.cards.length &&\n          (person == \"dealer\" && hideCard\n            ? getHiddenCardValue(personState)\n            : personState.score)}\n      </Name>\n      <View>\n        {person == \"dealer\" && hideCard ? (\n          <Card {...personState.cards[0]} />\n        ) : (\n          personState.cards.map((card, index) => <Card key={index} {...card} />)\n        )}\n      </View>\n    </Container>\n  );\n};\n\nexport default Hand;\n","import { Platform } from 'react-native';\nimport styled from 'styled-components/native';\n\nconst os = Platform.OS;\n\nexport const Wrapper = styled.SafeAreaView`\n  ${os === \"ios\" ? \"margin: 0 20px;\" : \"padding: 0 4%;\"};\n  ${os === \"android\" ? \"margin-top: 40px;\" : \"margin-top: 10px;\"}\n`;\n\nexport const Status = styled.Text`\n  font-size: 28px;\n  text-align: center;\n  margin-bottom: 30px;\n  font-weight: 300;\n  letter-spacing: 1px;\n`;\n\nexport const Title = styled.Text`\n  font-size: 40px;\n  text-align: center;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\nexport const HandContainer = styled.View`\n  margin: 20px 0;\n`;\n","import React from \"react\";\n// redux\nimport { useDispatch } from \"react-redux\";\nimport { hit, setTurn, resetGame } from \"./gameSlice\";\n// components\nimport { Text } from \"@ui-kitten/components\";\nimport GameControls from \"../GameControls/GameControls\";\nimport Hand from \"../Hands/Hand\";\nimport { HandContainer, Status, Title, Wrapper } from \"./Game.styles\";\n// utils\nimport { getEndGameStatus, isGameOver } from \"../GameControls/utils\";\nimport useSelector from \"../../functions/useSelector\";\n\nexport default function Game() {\n  const dispatch = useDispatch();\n  const gameState = useSelector((state) => state.game);\n  const { player, dealer, turn, bet, chips, isBetting, gameOver } = gameState;\n\n  React.useEffect(() => {\n    if (turn === \"dealer\") {\n      if (dealer.score < 17) {\n        setTimeout(() => dispatch(hit(\"dealer\")), 1000);\n      } else {\n        dispatch(setTurn(null));\n      }\n    }\n  }, [dealer, turn]);\n\n  React.useEffect(() => {\n    if (!chips) dispatch(resetGame());\n  }, [chips]);\n\n  return (\n    <Wrapper>\n      <Title>Blackjack</Title>\n      {gameOver ? (\n        <Status testID=\"Status\">{getEndGameStatus(gameState)}</Status>\n      ) : null}\n      {!isBetting && (\n        <Text testID=\"CurrentBet\" category=\"h4\">\n          Current bet: {bet.toString()}\n        </Text>\n      )}\n      <Text category=\"h5\">Total chips: {chips.toString()}</Text>\n      {!isBetting && (\n        <HandContainer testID=\"Cards\">\n          <Hand\n            hideCard={turn === \"player\"}\n            person=\"dealer\"\n            personState={dealer}\n            testID=\"DealerHand\"\n          />\n          <Hand person=\"player\" personState={player} testID=\"PlayerHand\" />\n        </HandContainer>\n      )}\n      <GameControls gameOver={gameOver} />\n    </Wrapper>\n  );\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport game from \"./features/Game/gameSlice\";\nconst rootReducer = combineReducers({\n  game,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ApplicationProvider } from \"@ui-kitten/components\";\nimport { mapping, light as lightTheme } from \"@eva-design/eva\";\nimport Game from \"./app/features/Game/Game\";\nimport store from \"./app/store\";\n\nexport default function App() {\n  return (\n    <ApplicationProvider mapping={mapping} theme={lightTheme}>\n      <Provider store={store}>\n        <Game />\n      </Provider>\n    </ApplicationProvider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/blackjack/expo-service-worker.js', { scope: '/blackjack/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}